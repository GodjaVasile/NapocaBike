@page
@model NapocaBike.Pages.Locations.IndexModel

@{
    ViewData["Title"] = "Locations list ";
}

<h1>Locations</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<div id="map" style="height:400px;"></div>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Location[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location[0].Adress)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Location[0].Program)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location[0].Latitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location[0].Longitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location[0].LocationCategories)
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.LocationD.Locations)
        {
            string selectedRow = "";
            if (item.ID == Model.LocationID)
            {
                selectedRow = "table-success";
            }
            <tr class="@selectedRow">
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adress)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.Program)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Latitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Longitude)
                </td>
                <td>
                    @{
                        foreach (var category in item.LocationCategories)
                        {
                            @: @category.Category.CategoryName <br />
                        }
                    }
                </td>
                <td>
                    <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                    @*                <a asp-page="./Details" asp-route-id="@item.ID">Details</a> |
                *@                <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
<h1>NapocaBike Rentals</h1>
<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.LocationD.BikeRentals.FirstOrDefault().Name)</th>
            <th>@Html.DisplayNameFor(model => model.LocationD.BikeRentals.FirstOrDefault().Adress)</th>
            <th>@Html.DisplayNameFor(model => model.LocationD.BikeRentals.FirstOrDefault().BikesAvailable)</th>
            <th>@Html.DisplayNameFor(model => model.LocationD.BikeRentals.FirstOrDefault().EmptySpaces)</th>
            <th>@Html.DisplayNameFor(model => model.LocationD.BikeRentals.FirstOrDefault().Latitude)</th>
            <th>@Html.DisplayNameFor(model => model.LocationD.BikeRentals.FirstOrDefault().Longitude)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var rental in Model.LocationD.BikeRentals)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => rental.Name)</td>
                <td>@Html.DisplayFor(modelItem => rental.Adress)</td>
                <td>@Html.DisplayFor(modelItem => rental.BikesAvailable)</td>
                <td>@Html.DisplayFor(modelItem => rental.EmptySpaces)</td>
                <td>@Html.DisplayFor(modelItem => rental.Latitude)</td>
                <td>@Html.DisplayFor(modelItem => rental.Longitude)</td>
                <td>
                    <!-- Adăugați aici linkurile pentru Edit, Details și Delete, dacă este necesar -->
                </td>
            </tr>
        }
    </tbody>
</table>


@section Scripts {
    <script>
        var map;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 46.770439, lng: 23.591423 },
                zoom: 12
            });
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                alert("Geolocation is not supported by this browser.");
            }


            function createContent(name, program, categoriy) {
                var content = '<div class="marker-title">' + name + '<br />Program: ' + program + '<br />Tip locatie: ' + categoriy + '</div>';
                return content;
            }

            // New function to create content for bike rentals
            function createContentRental(name, bikesAvailable, emptySpaces) {
                var content = '<div class="marker-title">' + name + '<br />Bikes Available: ' + bikesAvailable + '<br />Empty Spaces: ' + emptySpaces + '</div>';
                return content;
            }


            function OpenMarkerDetails(content, map, marker) {
                var infowindow = new google.maps.InfoWindow({
                    content: content
                });
                infowindow.open(map, marker);
            }


        @foreach (var item in Model.LocationD.Locations)
        {
            <text>
                    (function () {
                        var content = createContent('@item.Name', '@item.Program', '@item.LocationCategories');

                        var marker = new google.maps.Marker({
                            position: { lat: @item.Latitude, lng: @item.Longitude },
                            map: map
                        });

                        marker.addListener('click', function () { OpenMarkerDetails(content, map, marker); });
                    })();
            </text>
        }

        @foreach (var rental in Model.LocationD.BikeRentals)
        {
            <text>
                    (function () {
                        var content = createContentRental('@rental.Name', '@rental.BikesAvailable', '@rental.EmptySpaces');

                        var marker = new google.maps.Marker({
                            position: { lat: @rental.Latitude, lng: @rental.Longitude },
                            map: map,
                            icon: {
                                url: "/Icons/placeholder.png",
                                scaledSize: new google.maps.Size(32, 32)
                            }
                        });

                        marker.addListener('click', function () { OpenMarkerDetails(content, map, marker); });
                    })();
            </text>
        }

                }
        function showPosition(position) {
            var lat = position.coords.latitude;
            var lng = position.coords.longitude;

            currentLocationMarker = new google.maps.Marker({
                position: { lat: lat, lng: lng },
                map: map,
                icon: {
                    url: "/Icons/person.png",
                    scaledSize: new google.maps.Size(32, 32) // specify the size of the icon
                },
                title: "Your Current Location"
            });

            map.setCenter({ lat: lat, lng: lng });
            map.setZoom(15);
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCzHZqkegdjz_xvNtEuYReEdgrPi1PFmbk&callback=initMap&v=weekly" async defer></script>
}



