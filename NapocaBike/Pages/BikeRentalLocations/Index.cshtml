@page
@model NapocaBike.Pages.BikeRentalLocations.IndexModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<div id="map" style="height: 600px; margin-top: 20px;"></div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.BikeRentalLocation[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BikeRentalLocation[0].EmptySpaces)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BikeRentalLocation[0].BikesAvailable)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BikeRentalLocation[0].Adress)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.BikeRentalLocation) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EmptySpaces)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.BikesAvailable)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Adress)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@section Scripts {
    <script>


        async function geocodeAddress(address) {
            const geocoder = new google.maps.Geocoder();
            return new Promise((resolve, reject) => {
                geocoder.geocode({
                    address: address,
                    componentRestrictions: {
                        country: 'RO',
                        locality: 'Cluj'
                    }
                }, (results, status) => {
                    if (status === google.maps.GeocoderStatus.OK) {
                        const lat = results[0].geometry.location.lat();
                        const lng = results[0].geometry.location.lng();
                        resolve({ lat, lng });
                    } else {
                        reject(status);
                    }
                });
            });
        }



    async function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 46.770439, lng: 23.591423 },
        zoom: 13,
    });

    const locations = @Html.Raw(Json.Serialize(Model.BikeRentalLocation));

    for (const location of locations) {
        try {
            const position = await geocodeAddress(location.name);
            

            const marker = new google.maps.Marker({
                position,
                map,
                title: location.name,
            });

            const infowindow = new google.maps.InfoWindow({
                content: `
                    <div>
                        <h3>${location.name}</h3>
                        <p>Empty Spaces: ${location.emptySpaces}</p>
                        <p>Bikes Available: ${location.bikesAvailable}</p>
                        <p>Address: ${location.adress}</p>
                    </div>
                `,
            });

            marker.addListener("click", () => {
                infowindow.open(map, marker);
            });

            markers.push(marker);
        } catch (error) {
            console.error(`Geocoding failed for address: ${location.adress}, reason: ${error}`);
        }
    }


}




    </script>




    <script src="~/GoogleMapsApiProxy" async defer></script>
}
